@import url(https://fonts.googleapis.com/css?family=Roboto:300);
$color-background: #181818;
$color-item-background: #282828;
$color-type: #fefefe;
$thumb-side: 240px;
$item-height: 360px;

@mixin center-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.theBand{
display:flex;
justify-content:center;
align-items:center;
margin-bottom:200px;
    .theBand2Holder{
      display:flex;
justify-content:center;
align-items:center;

.artist {
  width: $thumb-side;
  height: $item-height;
      margin:0px 20px;
  &:last-child {
    margin: 0;
  }
  &__thumbnail {
    position: relative;
    width: $thumb-side;
    height: $thumb-side;
    overflow: hidden;
  }
  &__blur {
    position: absolute;
    top: 0;
    left: 0;
    filter: blur(40px);
    z-index: 1;
  }
  &__image {
    width: ($thumb-side / 2);
    height: ($thumb-side / 2);;
    border-radius: 50%;
    z-index: 3;
    @include center-center;
  }
  &__ring {
    width: 160px;
    height: 160px;
    border-radius: 50%;
    background: linear-gradient(90deg, rgba(255, 255, 255, .2) 0%, rgba(0, 0, 0, 0) 20%, rgba(0, 0, 0, 0) 80%, rgba(255, 255, 255, .2) 100%);
    z-index: 2;
    box-shadow: 4px 0 2px -4px rgba(255, 255, 255, .9), -4px 0 2px -4px rgba(255, 255, 255, .9);
    @include center-center;
    &--outer {
      width: 200px;
      height: 200px;
    }
  }
  &__label {
    display: flex;
    height: ($item-height - $thumb-side);
    flex-direction: column;
    justify-content: space-between;
    padding: 15px 10px;
  }
}
    }
  
.capital {
  color: darken($color-type, 50);
  text-transform: uppercase;
}




@media(max-width:500px){   .theBand2Holder{
    flex-direction:column;
    }
  }
@media(max-width:600px){

    flex-direction:column;


    .artist{
      margin:20px 0px;
    }
}


 @media(max-width:900px) and (max-height:500px) and (min-width:501px){

    flex-direction:column;


    .artist{
      margin:20px 0px;
    }
 }



  @media(max-width:1380px) and (max-height:1380px) and (min-width:700px){

    flex-direction:column;


    .artist{
      margin:20px 0px;
    }
 }




}


.weave {
  display: flex;
  justify-content:center;
  align-items:flex-start;
  width: 120px;
  height: 150px;
  border: 4px solid #ffb9ad;
  border-radius: 46px;
  margin: 40px auto;
  position: relative;
  color: #ffb9ad;
  text-align: center;
  font: 700 30px/120px "Quicksand", sans-serif;
}
.weave:before, .weave:after {
  display: block;
  width: 120px;
  height: 120px;
  border: 4px solid #ffb9ad;
  box-shadow:0 0 10px azure;
  border-radius: 36px;
  content: "";
  position: absolute;
  top: -4px;
  left: -4px;
}
.weave:before {
  -moz-transform: rotate(30deg);
  -ms-transform: rotate(30deg);
  -webkit-transform: rotate(30deg);
  transform: rotate(30deg);
}
.weave:after {
  -moz-transform: rotate(60deg);
  -ms-transform: rotate(60deg);
  -webkit-transform: rotate(60deg);
  transform: rotate(60deg);
}


//-----------------------------------------GLITCH--------------------
@import url('https://fonts.googleapis.com/css?family=Montserrat:100');


#wrapper {
   text-align: center;
}

.sub {
  color: rgb(100,220,220);
  letter-spacing: 1em;
}

@mixin glitchCopy { 
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.glitch {
  position: relative;
  color: white;
  letter-spacing: .5em;
  /* Animation provies a slight random skew. Check bottom of doc
  for more information on how to random skew. */
  animation: glitch-skew 1s infinite linear alternate-reverse;
  
  // Creates a copy before our text. 
  &::before{
    // Duplicates our text with the mixin.
    @include glitchCopy;
    // Scoots text slightly to the left for the color offset.
    left: 2px;
    // Creates the color 'shadow' that happens on the glitch.
    text-shadow: -2px 0 #ff00c1;
    /* Creates an initial clip for our glitch. This works in
    a typical top,right,bottom,left fashion and creates a mask
    to only show a certain part of the glitch at a time. */
    clip: rect(44px, 450px, 56px, 0);
    /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
    with an alternating animation to keep things fresh. */
    animation: glitch-anim 5s infinite linear alternate-reverse;
  }
  
  // Creates a copy after our text. Note comments from ::before.
  &::after {
    @include glitchCopy;
    left: -2px;
    text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
    animation: glitch-anim2 1s infinite linear alternate-reverse;
  }
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
      transform: skew((random(100) / 100) + deg);
    }
  }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
      transform: skew((random(100) / 100) + deg);
    }
  }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
  $steps: 10;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      transform: skew((random(10) - 5) + deg);
    }
  }
}